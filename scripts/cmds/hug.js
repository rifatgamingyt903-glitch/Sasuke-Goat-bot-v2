const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");
const jimp = require("jimp");

module.exports = {
  config: {
    name: "hug",
    aliases: [],
    version: "1.0",
    author: "ЁЭРВЁЭРШЁЭРБЁЭРДЁЭРС тШвя╕П_ЁЦгШ -ЁЭРБЁЭРОЁЭРУ тЪая╕П ЁЭС╗ЁЭСмЁЭСиЁЭС┤_ тШвя╕П",
    countDown: 5,
    role: 0,
    shortDescription: "hug frame create",
    longDescription: "ржПржХржЬржиржХрзЗ ржорзЗржирж╢ржи ржХрж░рзЗ рж╕рзБржирзНржжрж░ рж╣рж╛ржЧ ржлрзНрж░рзЗржо рждрзИрж░рж┐ ржХрж░рзЛ!",
    category: "fun",
    guide: {
      en: "{pn} @mention"
    }
  },

  onStart: async function ({ event, api, args, message }) {
    const mention = Object.keys(event.mentions);
    const senderID = event.senderID;
    const threadID = event.threadID;

    if (mention.length !== 1)
      return message.reply("ржЖрж░рзЗ ржмрж▓ржж ржПржХржЬржиржХрзЗ ржорзЗржирж╢ржи ржХрж░рзЗЁЯдзЁЯдг");

    const dirMaterial = path.join(__dirname, "cache", "canvas");
    const bgPath = path.join(dirMaterial, "hugv3.png");

    // Ensure directory exists
    if (!fs.existsSync(dirMaterial)) fs.mkdirSync(dirMaterial, { recursive: true });

    // Download background if missing
    if (!fs.existsSync(bgPath)) {
      const img = await axios.get("https://i.imgur.com/7lPqHjw.jpg", { responseType: "arraybuffer" });
      fs.writeFileSync(bgPath, Buffer.from(img.data, "utf-8"));
    }

    async function circle(image) {
      image = await jimp.read(image);
      image.circle();
      return await image.getBufferAsync("image/png");
    }

    async function makeImage({ one, two }) {
      const bg = await jimp.read(bgPath);
      const avatarOne = path.join(dirMaterial, `avt_${one}.png`);
      const avatarTwo = path.join(dirMaterial, `avt_${two}.png`);
      const output = path.join(dirMaterial, `hug_${one}_${two}.png`);

      const getAvatar = async (id, dest) => {
        const res = await axios.get(
          `https://graph.facebook.com/${id}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`,
          { responseType: "arraybuffer" }
        );
        fs.writeFileSync(dest, Buffer.from(res.data, "utf-8"));
      };

      await getAvatar(one, avatarOne);
      await getAvatar(two, avatarTwo);

      const circleOne = await jimp.read(await circle(avatarOne));
      const circleTwo = await jimp.read(await circle(avatarTwo));

      bg.composite(circleOne.resize(220, 220), 200, 50);
      bg.composite(circleTwo.resize(220, 220), 490, 200);

      const raw = await bg.getBufferAsync("image/png");
      fs.writeFileSync(output, raw);
      fs.unlinkSync(avatarOne);
      fs.unlinkSync(avatarTwo);

      return output;
    }

    const captions = [
      "тЭЭ ржпржжрж┐ ржХржЦржирзЛ ржЕржирзБржнрзВрждрж┐ рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ рждрзЛржорж╛рж░ ржкрзНрж░рждрж┐ ржЖржорж╛рж░ ржЕржирзБржнрзВрждрж┐ ржкрзГржерж┐ржмрзАрж░ рж╕рзЗрж░рж╛ ржЕржирзБржнрзВрждрж┐!ЁЯМ╗",
      "тЭЭ рждрзБржорж┐ ржЖржорж╛рж░ ржЬрзАржмржирзЗрж░ рж╕рзЗрж░рж╛ ржЕржзрзНржпрж╛ржпрж╝, ржпрзЗржЗ ржЕржзрзНржпрж╛ржпрж╝ ржмрж╛рж░ржмрж╛рж░ ржкржбрж╝рждрзЗ ржЗржЪрзНржЫрзЗ ржХрж░рзЗ!ЁЯТЭ",
      "тЭЭ рждрзЛржорж╛рж░ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛рж░ ржорзВрж▓рзНржп ржЖржорж┐ ржХрж┐ржнрж╛ржмрзЗ ржжрзЗржмрзЛ, рждрж╛ ржЖржорж╛рж░ ржЬрж╛ржирж╛ ржирзЗржЗ, рж╢рзБржзрзБ ржЬрж╛ржирж┐ ржкрзНрж░ржержо ржерзЗржХрзЗ ржпрзЗ ржнрж╛ржмрзЗ ржнрж╛рж▓рзЛржмрзЗрж╕рзЗржЫрж┐рж▓рж╛ржоЁЯТЬ рж╕рзЗржнрж╛ржмрзЗржЗ ржнрж╛рж▓рзЛржмрзЗрж╕рзЗ ржпрж╛ржмрзЛ!ЁЯе░",
      "тЭЭ ржЖржорж┐ ржкрзНрж░рзЗржорзЗ ржкржбрж╝рж╛рж░ ржЖржЧрзЗ рждрзЛржорж╛рж░ ржорж╛ржпрж╝рж╛ржпрж╝ ржЬржбрж╝рж┐ржпрж╝рзЗ ржЧрзЗржЫрж┐, ржпрзЗ ржорж╛ржпрж╝рж╛ ржирзЗрж╢рж╛рж░ ржорждрзЛ, ржЖржорж┐ ржЪрж╛ржЗрж▓рзЗ рждрзЛржорж╛рж░ ржирзЗрж╢рж╛ ржХрж╛ржЯрж┐ржпрж╝рзЗ ржЙржарждрзЗ ржкрж╛рж░рж┐ ржирж╛!ЁЯТЭ",
      "тЭЭ рждрзЛржорж╛ржХрзЗ ржЪрзЗржпрж╝рзЗржЫрж┐рж▓рж╛ржо, ржЖрж░ рждрзЛржорж╛ржХрзЗржЗ ржЪрж╛ржЗ, рждрзБржорж┐ ржЖржорж╛рж░ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ЁЯЦд рждрзБржорж┐ ржЖржорж╛рж░ ржмрзЗржБржЪрзЗ ржерж╛ржХрж╛рж░ ржХрж╛рж░ржг!ЁЯТЮ",
      "тЭЭ ржЖржорж╛рж░ ржХрж╛ржЫрзЗ рждрзЛржорж╛ржХрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛рж░ ржХрзЛржирзЛ рж╕ржВржЬрзНржЮрж╛ ржирзЗржЗ, рждрзЛржорж╛ржХрзЗ ржнрж╛рж▓рзЛржмрзЗрж╕рзЗ ржпрж╛ржУржпрж╝рж╛ рж╣ржЪрзНржЫрзЗ ржЖржорж╛рж░ ржирж┐рж╢рзНржЪрзБржк ржЕржирзБржнрзВрждрж┐!тЭдя╕П",
      "тЭЭ рждрзБржорж┐ ржЖржорж╛рж░ ржЬрзАржмржирзЗрж░ рж╕рзЗржЗ ржЧрж▓рзНржк, ржпрж╛ ржкрзЬрждрзЗ ржЧрж┐рзЯрзЗ ржкрзНрж░рждрж┐ржмрж╛рж░ржЗ ржирждрзБржи ржХрж┐ржЫрзБ ржЖржмрж┐рж╖рзНржХрж╛рж░ ржХрж░рж┐!ЁЯТЪ",
      "тЭЭ ржЖржорж╛рж░ ржоржирзЗрж░ ржЧрж╣рзАржирзЗ ржмрж╛рж╕ ржХрж░рж╛ рж░рж╛ржЬржХржирзНржпрж╛ рждрзЛржорж╛ржХрзЗ ржЕржирзЗржХ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐редтЭдя╕ПтАНЁЯй╣",
      "тЭЭ I feel complete in my life, ржпржЦржи ржнрж╛ржмрж┐ рждрзЛржорж╛рж░ ржорждрзЛ ржПржХржЯрж╛ рж▓ржХрзНрж╖рзНржорзА ржорж╛ржирзБрж╖ ржЖржорж╛рж░ ржЬрзАржмржи рж╕ржЩрзНржЧрзА!ЁЯМ║"
    ];

    try {
      const pathImg = await makeImage({ one: senderID, two: mention[0] });
      const caption = captions[Math.floor(Math.random() * captions.length)];
      await message.reply({
        body: caption,
        attachment: fs.createReadStream(pathImg)
      });
      fs.unlinkSync(pathImg);
    } catch (err) {
      console.error(err);
      message.reply("тЭМ Failed to generate hug image.");
    }
  }
};
